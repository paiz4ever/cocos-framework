
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export namespace guide { 
export enum EOperation {
    /**
     * 点击引导
     */
    CLICK = 1,
    /**
     * 滑动引导
     */
    SLIDE = 2,
    /**
     * 链接引导
     */
    CONTACT = 3,
}

} 





export class GuideItem {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.redirect === undefined) { throw new Error() }
        this.redirect = _json_.redirect
        if (_json_.next === undefined) { throw new Error() }
        this.next = _json_.next
        if (_json_.operation === undefined) { throw new Error() }
        this.operation = _json_.operation
        if(_json_.target != undefined) { this.target = _json_.target } else { this.target = undefined }
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 中断重定向
     */
    readonly redirect: number
    /**
     * 下一步引导
     */
    readonly next: number
    /**
     * 引导操作
     */
    readonly operation: guide.EOperation
    /**
     * 引导目标（当同时存在多个目标时必填）
     */
    readonly target: string|undefined

    resolve(tables:Tables)
    {
        
        
        
        
        
        
    }
}





export class LanguageItem {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.zh === undefined) { throw new Error() }
        this.zh = _json_.zh
        if (_json_.en === undefined) { throw new Error() }
        this.en = _json_.en
    }

    /**
     * 场景
     */
    readonly id: string
    /**
     * 简体中文
     */
    readonly zh: string
    /**
     * 英文
     */
    readonly en: string

    resolve(tables:Tables)
    {
        
        
        
    }
}





export namespace guide {
export class TbGuide{
    private _dataMap: Map<number, GuideItem>
    private _dataList: GuideItem[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, GuideItem>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: GuideItem
            _v = new GuideItem(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, GuideItem> { return this._dataMap; }
    getDataList(): GuideItem[] { return this._dataList; }

    get(key: number): GuideItem | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace language {
export class TbLanguage{
    private _dataMap: Map<string, LanguageItem>
    private _dataList: LanguageItem[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, LanguageItem>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: LanguageItem
            _v = new LanguageItem(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, LanguageItem> { return this._dataMap; }
    getDataList(): LanguageItem[] { return this._dataList; }

    get(key: string): LanguageItem | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



type JsonLoader = (file: string) => any

export class Tables {
    private _TbGuide: guide.TbGuide
    get TbGuide(): guide.TbGuide  { return this._TbGuide;}
    private _TbLanguage: language.TbLanguage
    get TbLanguage(): language.TbLanguage  { return this._TbLanguage;}

    constructor(loader: JsonLoader) {
        this._TbGuide = new guide.TbGuide(loader('guide_tbguide'))
        this._TbLanguage = new language.TbLanguage(loader('language_tblanguage'))

        this._TbGuide.resolve(this)
        this._TbLanguage.resolve(this)
    }
}

