"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const https_1 = __importDefault(require("https"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const crypto_1 = __importDefault(require("crypto"));
const file_1 = require("./file");
const FILE_SUFFIX = [".png", ".jpg", ".jpeg"];
const MAX_FILE_SIZE = 5 * 1024 * 1024;
const TINYPNG_CACHE_FILE = path_1.default.join(Editor.Project.path, "caches/tinypng.json");
const OPTIONS = {
    method: "POST",
    hostname: "tinypng.com",
    path: "/backend/opt/shrink",
    headers: {
        rejectUnauthorized: false,
        "Postman-Token": Date.now(),
        "Cache-Control": "no-cache",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
    },
};
function getRandomIP() {
    return Array.from({ length: 4 }, () => Math.floor(Math.random() * 255)).join(".");
}
function fileEach(dir, callback) {
    try {
        const files = fs_1.default.readdirSync(dir);
        files.forEach((file) => {
            const filePath = path_1.default.join(dir, file);
            const stats = fs_1.default.statSync(filePath);
            if (stats.isDirectory()) {
                fileEach(filePath, callback);
            }
            else if (
            // 必须是文件，小于5MB，后缀 jpg 或 png
            stats.size <= MAX_FILE_SIZE &&
                stats.isFile() &&
                FILE_SUFFIX.includes(path_1.default.extname(file))) {
                callback(filePath);
            }
        });
    }
    catch (err) {
        console.error(err);
    }
}
function getFileHash(filePath) {
    const fileBuffer = fs_1.default.readFileSync(filePath);
    const hashSum = crypto_1.default.createHash("md5");
    hashSum.update(fileBuffer);
    return hashSum.digest("hex");
}
function loadCache() {
    if (fs_1.default.existsSync(TINYPNG_CACHE_FILE)) {
        const cacheData = fs_1.default.readFileSync(TINYPNG_CACHE_FILE, "utf-8");
        return JSON.parse(cacheData);
    }
    return {};
}
function saveCache(cache) {
    (0, file_1.ensureDirectoryExistence)(TINYPNG_CACHE_FILE);
    fs_1.default.writeFileSync(TINYPNG_CACHE_FILE, JSON.stringify(cache, null, 2));
}
async function fileUpload(imgPath) {
    return new Promise((resolve, reject) => {
        OPTIONS.headers["X-Forwarded-For"] = getRandomIP();
        const req = https_1.default.request(OPTIONS, (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                try {
                    const parsedData = JSON.parse(data);
                    if (parsedData.error) {
                        reject(new Error(parsedData.message));
                    }
                    else {
                        resolve(parsedData);
                    }
                }
                catch (error) {
                    reject(new Error("Failed to parse response JSON"));
                }
            });
        });
        req.on("error", reject);
        const fileStream = fs_1.default.createReadStream(imgPath);
        fileStream.on("error", (err) => {
            req.destroy(err);
            reject(err);
        });
        fileStream.on("end", () => {
            req.end();
        });
        fileStream.pipe(req);
    });
}
async function fileUpdate(imgPath, resp) {
    return new Promise((resolve, reject) => {
        const options = new url_1.URL(resp.output.url);
        const req = https_1.default.request(options, (res) => {
            const fileStream = fs_1.default.createWriteStream(imgPath, { encoding: "binary" });
            res.setEncoding("binary");
            res.pipe(fileStream);
            fileStream.on("finish", () => resolve(resp));
            fileStream.on("error", (err) => {
                req.destroy(err);
                reject(err);
            });
        });
        req.on("error", reject);
        req.end();
    });
}
function toSize(b) {
    if (b < 1024) {
        return b + "B";
    }
    else if (b < 1024 * 1024) {
        return (b / 1024).toFixed(2) + "KB";
    }
    else {
        return (b / 1024 / 1024).toFixed(2) + "MB";
    }
}
function toPercent(num) {
    return (num * 100).toFixed(2) + "%";
}
async function fileTiny(filePath) {
    try {
        const response = await fileUpload(filePath);
        return await fileUpdate(filePath, response);
    }
    catch (error) {
        throw error;
    }
}
async function default_1(dir) {
    if (!fs_1.default.existsSync(dir)) {
        console.error(`目录不存在：${dir}`);
        return;
    }
    const cache = loadCache();
    const basename = path_1.default.basename(dir);
    console.log(`[${basename}] 压缩中...`);
    const stats = fs_1.default.statSync(dir);
    if (stats.isFile()) {
        const ext = path_1.default.extname(dir);
        if (!FILE_SUFFIX.includes(ext)) {
            console.log(`[${basename}] 压缩失败：只支持png、jpg与jpeg格式`);
            return;
        }
        const fileHash = getFileHash(dir);
        if (cache[dir] === fileHash) {
            console.log(`[${basename}] 已经压缩过，跳过`);
            return;
        }
        try {
            const resp = await fileTiny(dir);
            cache[dir] = getFileHash(dir);
            saveCache(cache);
            console.log("[1/1]", `[${basename}]`, `压缩成功，原始大小：${toSize(resp.input.size)}，压缩大小：${toSize(resp.output.size)}，压缩了：${toPercent((resp.input.size - resp.output.size) / resp.input.size)}`);
        }
        catch (err) {
            console.log("[1/1]", `[${basename}]`, `压缩失败：${err}`);
        }
    }
    else if (stats.isDirectory()) {
        let total = 0;
        let finished = 0;
        fileEach(dir, async (filePath) => {
            const relativePath = path_1.default.join(basename, path_1.default.relative(dir, filePath));
            const fileHash = getFileHash(filePath);
            if (cache[filePath] === fileHash) {
                console.log(`[${relativePath}] 已经压缩过，跳过`);
                return;
            }
            total++;
            try {
                const resp = await fileTiny(filePath);
                cache[filePath] = getFileHash(filePath);
                saveCache(cache);
                console.log(`[${++finished}/${total}]`, `[${relativePath}]`, `压缩成功，原始大小：${toSize(resp.input.size)}，压缩大小：${toSize(resp.output.size)}，压缩了：${toPercent((resp.input.size - resp.output.size) / resp.input.size)}`);
            }
            catch (err) {
                console.log(`[${++finished}/${total}]`, `[${relativePath}]`, `压缩失败：${err}`);
            }
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,